# This macro was provided by discord user Garrettwp to whom i give my thanks for sharing it with me.
# I have tweaked it a lot.
# They are based on the great Annex magprobe dockable probe macros "#Originally developed by Mental,
# modified for better use on K-series printers by RyanG and Trails", kudos to them.
# That macro as since evolved into a klipper plugin that currently is pending inclusion in klipper, 
# more information here, https://github.com/Annex-Engineering/Quickdraw_Probe/tree/main/Klipper_Macros
# User richardjm revised the macro variables and added some functions, thanks a lot
# by standing on the shoulders of giants, lets see if we can see further
#
# This macro is partialy copied from https://github.com/jlas1/Klicky-Probe
# Modified by Pieterv24 for use with SlideSwipe

[gcode_macro _Probe_Variables]
description: Variables for the probe
variable_probe_attached:    False
variable_probe_state:       False
variable_probe_lock:        False
variable_z_endstop_x:       0
variable_z_endstop_y:       0
gcode:

[gcode_macro _Homing_Variables]
gcode:
    {% set reset  = params.RESET|default(0) %}
    {% if reset %}
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
    {% endif %}

##########################
# Attach probe and lock it
[gcode_macro Attach_Probe_Lock]
description: Attaches SlideSwipe Probe, can only be docked after unlocking
gcode:
    SLIDESWIPE_ATTACH_PROBE
    _Probe_Lock

########################
# Dock probe and lock it
[gcode_macro Dock_Probe_Unlock]
description: Docks SlideSwipe Probe even if it was locked
gcode:
    _Probe_Unlock
    SLIDESWIPE_DOCK_PROBE

##############
# Unlock Probe
[gcode_macro _Probe_Unlock]
description: Unlocks SlideSwipe Probe state
gcode:
    SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }

############
# Lock Probe
[gcode_macro _Probe_Lock]
description: Locks SlideSwipe Probe state
gcode:
    SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }

[gcode_macro _exit_point]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION %}
    {% set move  = params.MOVE|default(0) %}
    {% set speed = params.SPEED|default(printer["gcode_macro _SlideSwipe_User_Variables"].travel_speed) %}
    # mandatory to save the new safe position
    M400
    RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}


[gcode_macro _entry_point]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION %}
    # mandatory to save the new safe position
    M400
    SAVE_GCODE_STATE NAME={function}
    # removes the Z offset for better bed based docking
    SET_GCODE_OFFSET Z=0
    # all the macros initially assume absolute positioning
    G90

[gcode_macro SLIDESWIPE_ATTACH_PROBE]
description: Attach SlideSwipe Probe
gcode:
    # Get Verbose status
    {% set verbose = printer["gcode_macro _SlideSwipe_User_Variables"].verbose %}

    # See if the position should be restored after the attach
    {% set goback  = params.BACK|default(0) %}
    # Get probe status
    {% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
    {% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}

    # Get SlideSwipe dock location
    {% set pickup_pos_x = printer["gcode_macro _SlideSwipe_User_Variables"].pickup_pos_x %}
    {% set pickup_pos_y = printer["gcode_macro _SlideSwipe_User_Variables"].pickup_pos_y %}
    {% set pickup_pos_z = printer["gcode_macro _SlideSwipe_User_Variables"].pickup_pos_z %}
    # Attach Move
    {% set attach_move_x = printer["gcode_macro _SlideSwipe_User_Variables"].attach_move_x %}
    {% set attach_move_y = printer["gcode_macro _SlideSwipe_User_Variables"].attach_move_y %}
    {% set attach_move_z = printer["gcode_macro _SlideSwipe_User_Variables"].attach_move_z %}
    # Dock move
    {% set dock_move_x = printer["gcode_macro _SlideSwipe_User_Variables"].dock_move_x %}
    {% set dock_move_y = printer["gcode_macro _SlideSwipe_User_Variables"].dock_move_y %}
    {% set dock_move_z = printer["gcode_macro _SlideSwipe_User_Variables"].dock_move_z %}
    # Safe Z for travel
	{% set safe_z = printer["gcode_macro _SlideSwipe_User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _SlideSwipe_User_Variables"].enable_z_hop %}
    # Set feedrates
    {% set travel_feedrate = printer["gcode_macro _SlideSwipe_User_Variables"].travel_speed * 60 %}
    {% set dock_feedrate = printer["gcode_macro _SlideSwipe_User_Variables"].dock_speed * 60 %}
    {% set release_feedrate = printer["gcode_macro _SlideSwipe_User_Variables"].release_speed * 60 %}
    {% set z_drop_feedrate = printer["gcode_macro _SlideSwipe_User_Variables"].z_drop_speed * 60 %}

    _entry_point function=SLIDESWIPE_ATTACH_PROBE

    # If there is no undock movement, fail
    {% if dockmove_x == dockmove_y == dockmove_z == 0 %}
        { action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
    {% endif %}
    # If there is no Attach movement, fail
    {% if attach_move_x == attach_move_y == attach_move_z == 0 %}
        { action_raise_error("No attach_move location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
    {% endif %}

    # If x and y are not homed
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }
    {% endif %}

    # If probe not attached and locked
    {% if not probe_attached and not probe_lock %}
        {% if verbose %}
            { action_respond_info("Attaching Probe") }
        {% endif %}

        # What to do when z_position is unknown
        {% if not 'z' in printer.toolhead.homed_axes %}
            {% if verbose %}
                { action_respond_info("Resetting Z position to zero") }
            {% endif %}
            SET_KINEMATIC_POSITION Z=0
        {% endif%}

        # Prior to saving actual position, check if its necessary to move to a safe Z
        # that has enought overhead for the attached probe
        {% if printer.toolhead.position.z < safe_z %}
            {% if verbose %}
                { action_respond_info("moving to a safe Z distance") }
            {% endif %}
            G0 Z{safe_z} F{z_drop_feedrate}
        {% endif %}

        _entry_point function=Attach_Probe_intern

        # Move toolhead to Probe entry location
        G0 X{pickup_pos_x|int - attach_move_x|int} Y{pickup_pos_y|int - attach_move_y|int} F{travel_feedrate}
        {% if pickup_pos_z != -128 %}
            G0 Z{pickup_pos_z|int - attach_move_z|int} F{dock_feedrate}
        {% endif %}

        # Extend SlideSwipe
        _SLIDESWIPE_EXTEND

        # Move toolhead over probe and attach
        {% if pickup_pos_z != -128 %}
            G0 Z{pickup_pos_z} F{dock_feedrate}
        {% endif %}
        G0 X{pickup_pos_x} Y{pickup_pos_y} F{dock_feedrate}

        # Undock Probe
        {% if pickup_pos_z != -128 %}
            G0 Z{pickup_pos_z|int - dock_move_z|int} F{z_drop_feedrate}
        {% endif %}
        G0 X{pickup_pos_x|int - dock_move_x|int} Y{pickup_pos_y|int - dock_move_y|int} F{release_feedrate}

        # Retract SlideSwipe
        _SLIDESWIPE_RETRACT

        # Go to Z safe distance
        {% if printer.toolhead.position.z < safe_z %}
          G0 Z{safe_z} F{z_drop_feedrate}
        {% endif %}

        _CheckProbe action=attach

        _exit_point function=Attach_Probe_intern move={goback}
    
    {% elif probe_lock %}
        {% if verbose %}
            { action_respond_info("Probe locked!") }
        {% endif %}

        # Probe attached, do nothing
        _CheckProbe action=query

    {% else %}
        {% if verbose %}
            { action_respond_info("Probe already attached!") }
        {% endif %}

        # Probe attached, do nothing
        _CheckProbe action=query

    {% endif %}
    _exit_point function=SLIDESWIPE_ATTACH_PROBE move={goback}

[gcode_macro SLIDESWIPE_DOCK_PROBE]
description: Dock SlideSwipe Probe
gcode:
    # Get Verbose status
    {% set verbose = printer["gcode_macro _SlideSwipe_User_Variables"].verbose %}

    # See if the position should be restored after the attach
    {% set goback  = params.BACK|default(0) %}
    # Get probe status
    {% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
    {% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
    # Get SlideSwipe dock location
    {% set pickup_pos_x = printer["gcode_macro _SlideSwipe_User_Variables"].pickup_pos_x %}
    {% set pickup_pos_y = printer["gcode_macro _SlideSwipe_User_Variables"].pickup_pos_y %}
    {% set pickup_pos_z = printer["gcode_macro _SlideSwipe_User_Variables"].pickup_pos_z %}
    # Attach Move
    {% set attach_move_x = printer["gcode_macro _SlideSwipe_User_Variables"].attach_move_x %}
    {% set attach_move_y = printer["gcode_macro _SlideSwipe_User_Variables"].attach_move_y %}
    {% set attach_move_z = printer["gcode_macro _SlideSwipe_User_Variables"].attach_move_z %}
    # Dock move
    {% set dock_move_x = printer["gcode_macro _SlideSwipe_User_Variables"].dock_move_x %}
    {% set dock_move_y = printer["gcode_macro _SlideSwipe_User_Variables"].dock_move_y %}
    {% set dock_move_z = printer["gcode_macro _SlideSwipe_User_Variables"].dock_move_z %}
    # Safe Z for travel
	{% set safe_z = printer["gcode_macro _SlideSwipe_User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _SlideSwipe_User_Variables"].enable_z_hop %}
    # Set feedrates
    {% set travel_feedrate = printer["gcode_macro _SlideSwipe_User_Variables"].travel_speed * 60 %}
    {% set dock_feedrate = printer["gcode_macro _SlideSwipe_User_Variables"].dock_speed * 60 %}
    {% set release_feedrate = printer["gcode_macro _SlideSwipe_User_Variables"].release_speed * 60 %}
    {% set z_drop_feedrate = printer["gcode_macro _SlideSwipe_User_Variables"].z_drop_speed * 60 %}

    _entry_point function=SLIDESWIPE_DOCK_PROBE

    # If there is no undock movement, fail
    {% if dockmove_x == dockmove_y == dockmove_z == 0 %}
        { action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
    {% endif %}
    # If there is no Attach movement, fail
    {% if attach_move_x == attach_move_y == attach_move_z == 0 %}
        { action_raise_error("No attach_move location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
    {% endif %}

    # If x and y are not homed
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }
    {% endif %}
    
    #If probe not attached and not locked
    {% if probe_attached and not probe_lock %}
        {% if verbose %}
            { action_respond_info("Docking Probe") }
        {% endif %}

        # Prior to saving actual position, check if its necessary to move to a safe Z
        # that has enought overhead for the attached probe
        {% if printer.toolhead.position.z < safe_z %}
            {% if verbose %}
                { action_respond_info("moving to a safe Z distance") }
            {% endif %}
            G0 Z{safe_z} F{z_drop_feedrate}
        {% endif %}

        _entry_point function=Dock_Probe_intern

        # Move toolhead to Probe dock entry location
        G0 X{pickup_pos_x|int - dock_move_x|int} Y{pickup_pos_y|int - dock_move_y|int} F{travel_feedrate}
        {% if pickup_pos_z != -128 %}
            G0 Z{pickup_pos_z|int - dock|int} F{dock_feedrate}
        {% endif %}

        # Extend SlideSwipe
        _SLIDESWIPE_EXTEND

        # Move probe into dock
        {% if pickup_pos_z != -128 %}
            G0 Z{pickup_pos_z} F{dock_feedrate}
        {% endif %}
        G0 X{pickup_pos_x} Y{pickup_pos_y} F{dock_feedrate}

        # Move toolhead from dock, leaving probe
        {% if pickup_pos_z != -128 %}
            G0 Z{pickup_pos_z|int - attach_move_z|int} F{z_drop_feedrate}
        {% endif %}
        G0 X{pickup_pos_x|int - attach_move_x|int} Y{pickup_pos_y|int - attach_move_y|int} F{release_feedrate}

        # Retract SlideSwipe
        _SLIDESWIPE_RETRACT

        # Go to Z safe distance
        {% if printer.toolhead.position.z < safe_z %}
          G0 Z{safe_z} F{z_drop_feedrate}
        {% endif %}

        _CheckProbe action=dock

        _exit_point function=Dock_Probe_intern move={goback}
    
    {% elif probe_lock %}
        {% if verbose %}
            { action_respond_info("Probe locked") }
        {% endif %}

        # Probe docked, do nothing
        _CheckProbe action=query

    {% else %}
        {% if verbose %}
            { action_respond_info("Probe already docked!") }
        {% endif %}

        # Probe attached, do nothing
        _CheckProbe action=query

    {% endif %}
    _exit_point function=SLIDESWIPE_DOCK_PROBE move={goback}

# Check to see if probe is where it is supposed to be after
# attaching/docking maneuver and set homing error or shutdown
[gcode_macro _CheckProbe]
variable_probe_state: 0
gcode:
    Query_Probe
    _SetProbeState action={ params.ACTION }

# Due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
[gcode_macro _SetProbeState]
gcode:
    {% set query_probe_triggered = printer.probe.last_query %}
    {% set action  = params.ACTION|default('') %}

    # If triggered (true), probe not attached
    {% if query_probe_triggered %}
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
    {% else %}
        # If not triggered (false), probe attached
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
    {% endif %}

    {% if action == 'query' %}
          SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
    {% endif %}

    # If probe fails to attach/detach

    # If not docked
    {% if not query_probe_triggered and action == 'dock' %}
        { action_raise_error("Probe dock failed!") }
    {% endif %}

    # If not attached
    {% if query_probe_triggered and action == 'attach' %}
        { action_raise_error("Probe attach failed!") }
    {% endif %}

#################
# Probe Calibrate
[gcode_macro PROBE_CALIBRATE]
rename_existing: _PROBE_CALIBRATE
description:Calibrate the probes z_offset with SlideSwipe automount
gcode:
    {% set safe_z = printer["gcode_macro _SlideSwipe_User_Variables"].safe_z|float %}
    {% set z_drop_feedrate = printer["gcode_macro _SlideSwipe_User_Variables"].z_drop_speed * 60 %}
    {% set travel_feedrate = printer["gcode_macro _SlideSwipe_User_Variables"].travel_speed %}
    {% set max_x = printer["gcode_macro _SlideSwipe_User_Variables"].max_bed_x %}
    {% set max_y = printer["gcode_macro _SlideSwipe_User_Variables"].max_bed_y %}
    {% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    # Protect against PROBE CALIBRATE performed from outside the bed
    {% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
          or printer['gcode_move'].position.y < probe_offset_y
          or printer['gcode_move'].position.x > (max_x - probe_offset_x)
          or printer['gcode_move'].position.x < probe_offset_x %}
      { action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED!") }
    {% endif%}

    _CheckProbe action=query
    G90
    SLIDESWIPE_ATTACH_PROBE back=1

    _PROBE_CALIBRATE {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    M118 moving the toolhead 20 mm from the bed
    TESTZ Z=20
    M118 remove manually the probe and continue calibration

################
# Probe Accuracy
[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
description:Probe Z-height accuracy at current XY position with SlideSwipe automount
gcode:
    {% set safe_z = printer["gcode_macro _SlideSwipe_User_Variables"].safe_z|float %}
    {% set z_drop_feedrate = printer["gcode_macro _SlideSwipe_User_Variables"].z_drop_speed * 60 %}
    {% set travel_feedrate = printer["gcode_macro _SlideSwipe_User_Variables"].travel_speed %}
    {% set max_x = printer["gcode_macro _SlideSwipe_User_Variables"].max_bed_x %}
    {% set max_y = printer["gcode_macro _SlideSwipe_User_Variables"].max_bed_y %}
    {% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    _entry_point function=PROBE_ACCURACY

    # Protect against PROBE_ACCURACY performed from outside the bed
    {% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
          or printer['gcode_move'].position.y < probe_offset_y
          or printer['gcode_move'].position.x > (max_x - probe_offset_x)
          or printer['gcode_move'].position.x < probe_offset_x %}
      { action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED!") }
    {% endif%}

    _CheckProbe action=query
    SLIDESWIPE_ATTACH_PROBE back=1

    _PROBE_ACCURACY {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    SLIDESWIPE_DOCK_PROBE back=1										   

    _exit_point function=PROBE_ACCURACY move=1

[force_move]
enable_force_move: True

#################
# Homing Override
[homing_override]
axes: xyz
gcode:
    # collect user state variables
    _SlideSwipe_User_Variables
    {% set verbose = printer["gcode_macro _SlideSwipe_User_Variables"].verbose %}
    {% set safe_z = printer["gcode_macro _SlideSwipe_User_Variables"].safe_z|float %}
    # Safe Z for travel
    {% set safe_z = printer["gcode_macro _SlideSwipe_User_Variables"].safe_z %}
    {% set enable_z_hop = printer["gcode_macro _SlideSwipe_User_Variables"].enable_z_hop %}
    {% set attach_move_x = printer["gcode_macro _SlideSwipe_User_Variables"].attach_move_x|default(0) %}
    {% set attach_move_y = printer["gcode_macro _SlideSwipe_User_Variables"].attach_move_y|default(0) %}
    {% set attach_move_z = printer["gcode_macro _SlideSwipe_User_Variables"].attach_move_z|default(0) %}
    {% set z_drop_feedrate = printer["gcode_macro _SlideSwipe_User_Variables"].z_drop_speed * 60 %}

    # if there is no Attach movement, fail
    {% if attach_move_x == attach_move_y == attach_move_z == 0 %}
        { action_raise_error("No attach_move location!") }
    {% endif %}

    _CheckProbe action=query

    # reset parameters
    {% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}

    {% if 'PROBE_LOCK' in params%}
        {% if verbose %}
            { action_respond_info("PROBE_LOCK = True") }
        {% endif %}
        {% set leave_probe_attached = True %}
    {% endif %}

    # which axes have been requested for homing
    {% if not 'X' in params
        and not 'Y' in params
        and not 'Z' in params %}

        {% set home_x, home_y, home_z = True, True, True %}

    {% else %}
        # Frame mount x-endstop - home Y before X
        {% if 'X' in params %}
            {% set home_x = True %}
        {% endif %}

        {% if 'Y' in params %}
            {% set home_y = True %}
        {% endif %}

        {% if 'Z' in params %}
            {% set home_z = True %}
        {% endif %}

        {% if 'X' in params
          and 'Y' in params
          and 'Z' in params %}
            # reset homing state variables
            # if homing all axes
            _Homing_Variables reset=1
        {% endif %}
    {% endif %}

    _entry_point function=homing_override

    # if Z is not homed, do not move the bed if it goes down
    {% if home_z %}
        {% if 'z' in printer.toolhead.homed_axes %}
            {% if printer.toolhead.position.z < safe_z %}
                {% if verbose %}
                    { action_respond_info("Z too low, performing ZHOP") }
                {% endif %}
                G0 Z{safe_z} F{z_drop_feedrate}
            {% endif %}
        {% else %}
            {% if verbose %}
                { action_respond_info("Z not homed, forcing full G28") }
            {% endif %}
            SET_KINEMATIC_POSITION X=0 Y=0 Z=0
            G0 Z{safe_z} F{z_drop_feedrate}
            {% set home_x, home_y, home_z = True, True, True %}
        {% endif %}
    {% endif %}

    # if the dock is oriented on the Y, first do Y endstop
    # {% if attach_move_y == 0 %}
    #     # Home y
    #     {% if home_y %}
    #         {% if verbose %}
    #             { action_respond_info("Homing Y") }
    #         {% endif %}
    #         G28 Y0
    #     {% endif %}
    #     {% set home_y = False %}
    # {% endif %}


    # Home x
    {% if home_x %}
        {% if verbose %}
            { action_respond_info("Homing X") }
        {% endif %}
        G28 X0
    {% endif %}

    # Home y
    {% if home_y %}
        {% if verbose %}
            { action_respond_info("Homing Y") }
        {% endif %}
        G28 Y0
    {% endif %}
    # Home z
    {% if home_z %}
        {% if verbose %}
            { action_respond_info("Homing Z") }
        {% endif %}

        # if probe is configured as endstop, attach it, else dock the probe if attached
        {% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
            SLIDESWIPE_ATTACH_PROBE
            # if PROBE_LOCK parameter is given, Attach Probe and lock until it´s unlocked
            {% if leave_probe_attached %}
                _Probe_Lock
            {% endif %}
        {% else %}
            SLIDESWIPE_DOCK_PROBE
        {% endif %}

        _Home_Z

        # if probe is configured as endstop, dock it
        {% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
            SLIDESWIPE_DOCK_PROBE
        {% endif %}
    {% endif %}
    _CheckProbe action=query

    _exit_point function=homing_override

# Home Z Routine
[gcode_macro _Home_Z]
gcode:
    {% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}
    {% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}
    {% set safe_z = printer["gcode_macro _SlideSwipe_User_Variables"].safe_z|float %}
    {% set travel_feedrate = printer["gcode_macro _SlideSwipe_User_Variables"].travel_speed * 60 %}
    {% set z_drop_feedrate = printer["gcode_macro _SlideSwipe_User_Variables"].z_drop_speed * 60 %}
    {% set verbose = printer["gcode_macro _SlideSwipe_User_Variables"].verbose %}

    _entry_point function=Home_Z

    # if x and y are not homed yet, raise error
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }
    {% else %}
        {% if not 'z' in printer.toolhead.homed_axes %}
            {% if verbose %}
                { action_respond_info("Resetting Z position to zero") }
            {% endif %}
            SET_KINEMATIC_POSITION Z=0
        {% endif %}

        # Move tool to safe homing position and home Z axis
        # location of z endstop
        G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}
        G28 Z0
        G0 Z{safe_z} F{z_drop_feedrate}
    {% endif %}

    _exit_point function=Home_Z