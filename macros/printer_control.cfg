#####################################################################
#   Print Commands
#####################################################################
[gcode_macro PRINT_START]
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
gcode:
    # Parameters
    {% set bed = params.BED|int %}
    {% set hotend = params.HOTEND|int %}
    {% set chamber = params.CHAMBER|default(0)|int %}
    {% set filament = params.FILAMENT|default('') %}
    {% set nozzle_diameter = params.NOZZLE|default(0.4) %}
    
	# Set the parameters as persistent variables so they can be referenced elsewhere 
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend}	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber}

    # Setup PA Settings
    _select_pa_value FILAMENT={filament} NOZZLE={nozzle_diameter}
    # Setup Firmware retraction
    _select_retraction_value FILAMENT={filament} NOZZLE={nozzle_diameter}

    UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=0                                       ; cancel exhaust off timer (if there is one)
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0                                       ; cancel off timer (if there is one)
    SET_PIN PIN=caselight VALUE=1                                                        ; turn on case light
    RESETSPEEDS                                                                          ; reset speed, accel etc to configured values
    M104 S140                                                                            ; set hotend to no-ooze temp
    M140 S{bed}                                                                          ; set bed to target temp
    G28                                                                                  ; home
    G90                                                                                  ; absolute positioning
    {% if printer["temperature_sensor chamber_temp"].temperature < chamber %}                 ; - if chamber is not at temp yet:
        HEATSOAK T={bed} MOVE=1                                                          ;   heatsoak macro + park in center
        M190 S{bed}                                                                      ;   wait for bed final temp
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp" MINIMUM={chamber}           ;   wait for chamber final temp
    {% else %}                                                                           ; - if chamber is already at temp:
        {% if printer.heater_bed.temperature < (bed-2) %}                                ; -- but bed is not fully heated (within 2C):
            HEATSOAK T={bed} MOVE=1                                                      ;       heatsoak and park
            M190 S{bed}                                                                  ;       wait for bed final temp
        {% else %}                                                                       ; -- and bed is already heated:
            HEATSOAK T={bed} MOVE=0                                                      ;       "heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
        {% endif %}
    {% endif %} 
    M106 S0                                                                              ; turn off part cooling fan (from heatsoak)
    BED_MESH_CLEAR                                                                       ; clear bed mesh
    QUAD_GANTRY_LEVEL                                                                    ; quad gantry level                                                                        ; home z
    G90                                                                                  ; absolute positioning
    G0 Z20                                                                               ; hop up to prevent knocking probe off after homing Z
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500  ; move to center of bed to prevent knocking probe off after homing Z (otherwise QGL just moves our Z hop down again before traveling)
    BED_MESH_CALIBRATE                                                                   ; mesh                                                                            ; home z again
    SMART_PARK
    STATUS_HEATING
    M109 S{hotend}                                                                       ; set & wait for hotend final temp                                           
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.5                                                 ; set chamber fan to 50%
    
    STATUS_PRINTING                                                                      ; Set stealthburner leds to printing mode
    LINE_PURGE
    

[gcode_macro PRINT_END]
gcode:
    CLEAR_PAUSE                                                                          ; clear pause (from M191) if there is one
    {% if printer.heater_bed.temperature >= 100 %}                                       
        SET_FAN_SPEED FAN=exhaust_fan SPEED=1                                                ; crank exhaust fan to 100% to evacuate chamber
    {% endif %}                                                 
    
    M400                                                                                 ; wait for buffer to clear
    G92 E0                                                                               ; zero the extruder
    G1 E-25 F3600                                                                        ; retract filament out of the hot zone

    M104 S0                                                                              ; turn only the hotend off
    M140 S{printer["gcode_macro PRINT_START"].bedtemp|int}                               ; return the bed to temp, some slicers like to turn it off
    M107                                                                                 ; turn off part cooling fan
    G91                                                                                  ; relative positioning
    G1 Z5 F3000                                                                          ; move nozzle up 5mm
    G90                                                                                  ; absolute positioning
    G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F19500.0    ; park nozzle at rear
    STATUS_READY
    BED_MESH_CLEAR                                                                       ; clear bed mesh                                    
    UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=120                                     ; turn exhaust off in 2 min
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=600                                     ; turn everything off in 10 min
    RESETSPEEDS                                                                          ; reset speed, accel etc to configured max values
    # SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0                                       ; disable XYE steppers (not z)
    # SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0
    # SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0

[gcode_macro _PRIME_NOZZLE]
gcode:
    SAVE_GCODE_STATE NAME=PRIME_NOZZLE_STATE
    M117 Priming
    G90                 ; Absolute coordinates.
    M83                 ; Relative extruder mode.
    G92 E0
    ; Move to start of line.
    G1 Z10 F900
    G1 Y3 X3 F18000
    G1 Z0.2 F900
    ; Print the line.
    G91                ; Relative coordinates.
    G1 X100 E25 F1000  ; Extrude filament 25mm (how much it retracted in PRINT_END).
    G1 Y-2 F1000
    G1 X-60 E9 F1000    ; Print second part of the line.
    G1 E-0.5 F3000      ; Retract to avoid stringing.
    G1 X0.5 E0 F1000    ; Wipe back to break string.
    G1 X-5.5 E0 F1000   ; Wipe forward to break string.
    RESTORE_GCODE_STATE NAME=PRIME_NOZZLE_STATE

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: BASE_CANCEL_PRINT
gcode:
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

# Pause and park toolhead at front center. Z hop by 10mm.
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                  ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                             ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}   ; set hotend temp variable for reference in resume macro
                                    
        SAVE_GCODE_STATE NAME=PAUSE                                                         ; save current print position for resume                
        BASE_PAUSE                                                                          ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}      ; check that zhop doesn't exceed z max
            G91                                                                             ; relative positioning
            G1 Z{z} F900                                                                    ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                 ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                 ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500 ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                     ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                             ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                      ; set timeout to 12 hours
    {% endif %}

# Return Z hop back down, prime nozzle, resume print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                      ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                                                            ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                                                         ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                                                              ; relative positioning
        M83                                                                                                              ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                             
            G1 Z{zhop * -1} E{e} F900                                                                                    ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                                                         ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=100                                                             ; restore position
        BASE_RESUME                                                                                                      ; resume print
    {% endif %}

[gcode_macro HEATSOAK]
gcode:
    # Parameters
    {% set t = params.T|default(110)|int %}
    {% set move = params.MOVE|default(1)|int %}

	SAVE_GCODE_STATE NAME=HEATSOAK
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0  ; cancel off timer (if there is one)
    SET_FAN_SPEED FAN=exhaust_fan SPEED=1               ; turn nevermore exhaust fan
    STATUS_HEATING
    SET_PIN PIN=caselight VALUE=1                   ; turn on case light
    M140 S{t}                                       ; heat bed
    {% if t >= 100 %}
        M104 S150                                   ; set hotend to no-ooze temp
        M106 S205                                   ; turn on part fan (80%)
    {% else %}
        M106 S0                                     ; turn part fan off
    {% endif %}
    {% if move == 1 %}
        CG28
		G90
		G0 Z{printer.toolhead.axis_maximum.z/2} F19500    
		G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500    
    {% endif %}
    STATUS_READY
	RESTORE_GCODE_STATE NAME=HEATSOAK

[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    M107                                 ; turn print cooling fan off
    # SET_FAN_SPEED FAN=Exhaust SPEED=0    ; turn exhaust fan off
    # SET_FAN_SPEED FAN=BedOuter SPEED=0   ; bed fan off
    # SET_FAN_SPEED FAN=BedInner SPEED=0   ; bed fan off
    SET_PIN PIN=caselight VALUE=0        ; turn light off
    STATUS_OFF

#####################################################################
#   Delayed GCodes
#####################################################################

[delayed_gcode EXHAUST_OFF]
gcode:
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0

[delayed_gcode DELAYED_OFF]
gcode:
    OFF ; call "OFF" macro, to turn off everything (heaters, motors, lights, fans)